// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;


contract Voting {
    enum Choices {Yes, No}

    struct Vote{
        Choices choice;
        address voter;
    }

    Vote public none;
    Vote[] public votes;

    function createVote(Choices _choice) external {
        require(!hasVoted(msg.sender), "You've already voted.");
        votes.push(Vote(_choice, msg.sender));
    }

    function changeVote(Choices _choice) external {
        Vote storage vote = findVote(msg.sender);
	require(vote.voter != none.voter);
	vote.choice = choice;
    }

    function findVote(address _voter) internal view returns (Vote memory){
        for(uint i = 0; i < votes.length; i++){
            if (votes[i].voter == _voter){
                return votes[i];
            }
        }
        return none;
    }

    function hasVoted(address _voter) public view returns (bool){
        for(uint i=0; i<votes.length; i++){
            if (votes[i].voter == _voter){
                return true;
            }
        }
        return false;
    }

    function findChoice(address _voter) external view returns (Choices){
        return findVote(_voter).choice;
    }

}